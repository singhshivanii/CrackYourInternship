class Solution {
    public int[] twoSum(int[] nums, int target) {
       HashMap<Integer, Integer> map = new HashMap<>();
        for(int i=0;i<nums.length;i++){
            map.put(nums[i],i);
        }
        for(int i=0;i<nums.length;i++){
            int comp=target-nums[i];
            if(map.containsKey(comp) && map.get(comp) != i){
                return new int  []  { i,map.get(comp) } ;
            }
        }
        return null;
        
    }
}


*The method creates a HashMap to store numbers and their indices.
*It populates this HashMap with each number from the nums array and its corresponding index.
*It then iterates through the nums array again, calculating the needed complement (comp) for each number to reach the target.
*It checks if this complement exists in the HashMap and if it is not the same element (i.e., not the same index) as the current one.
*If a valid pair is found, it returns their indices; otherwise, it returns null if no such pair exists.



